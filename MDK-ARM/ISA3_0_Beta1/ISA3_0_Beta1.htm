<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ISA3_0_Beta1\ISA3_0_Beta1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ISA3_0_Beta1\ISA3_0_Beta1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Oct 12 21:48:29 2020
<BR><P>
<H3>Maximum Stack Usage =       1688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pass2_fs_dither &rArr; fill_inverse_cmap &rArr; find_nearby_colors
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">HAL_I2SEx_FullDuplex_IRQHandler</a> from stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_FullDuplex_IRQHandler) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">I2S_IRQHandler</a> from stm32f4xx_hal_i2s.o(i.I2S_IRQHandler) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[eb]">USBH_MSC_ClassRequest</a> from usbh_msc.o(i.USBH_MSC_ClassRequest) referenced from usbh_msc.o(.data)
 <LI><a href="#[ea]">USBH_MSC_InterfaceDeInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceDeInit) referenced from usbh_msc.o(.data)
 <LI><a href="#[e9]">USBH_MSC_InterfaceInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceInit) referenced from usbh_msc.o(.data)
 <LI><a href="#[ec]">USBH_MSC_Process</a> from usbh_msc.o(i.USBH_MSC_Process) referenced from usbh_msc.o(.data)
 <LI><a href="#[ed]">USBH_MSC_SOFProcess</a> from usbh_msc.o(i.USBH_MSC_SOFProcess) referenced from usbh_msc.o(.data)
 <LI><a href="#[60]">USBH_UserProcess</a> from usb_host.o(i.USBH_UserProcess) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[e4]">USBH_initialize</a> from usbh_diskio.o(i.USBH_initialize) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[e8]">USBH_ioctl</a> from usbh_diskio.o(i.USBH_ioctl) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[e6]">USBH_read</a> from usbh_diskio.o(i.USBH_read) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[e5]">USBH_status</a> from usbh_diskio.o(i.USBH_status) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[e7]">USBH_write</a> from usbh_diskio.o(i.USBH_write) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[61]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[8d]">access_virt_barray</a> from jmemmgr.o(i.access_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[8c]">access_virt_sarray</a> from jmemmgr.o(i.access_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[88]">alloc_barray</a> from jmemmgr.o(i.alloc_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[86]">alloc_large</a> from jmemmgr.o(i.alloc_large) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[87]">alloc_sarray</a> from jmemmgr.o(i.alloc_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[85]">alloc_small</a> from jmemmgr.o(i.alloc_small) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[ce]">color_quantize</a> from jquant1.o(i.color_quantize) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[cf]">color_quantize3</a> from jquant1.o(i.color_quantize3) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[73]">consume_data</a> from jdcoefct.o(i.consume_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[62]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.finish_input_pass)
 <LI><a href="#[62]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[62]">consume_markers</a> from jdinput.o(i.consume_markers) referenced from jdinput.o(i.reset_input_controller)
 <LI><a href="#[ab]">decode_mcu</a> from jdarith.o(i.decode_mcu) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[e0]">decode_mcu</a> from jdhuff.o(i.decode_mcu) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[a8]">decode_mcu_AC_first</a> from jdarith.o(i.decode_mcu_AC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[dc]">decode_mcu_AC_first</a> from jdhuff.o(i.decode_mcu_AC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[a7]">decode_mcu_AC_refine</a> from jdarith.o(i.decode_mcu_AC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[db]">decode_mcu_AC_refine</a> from jdhuff.o(i.decode_mcu_AC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[a9]">decode_mcu_DC_first</a> from jdarith.o(i.decode_mcu_DC_first) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[dd]">decode_mcu_DC_first</a> from jdhuff.o(i.decode_mcu_DC_first) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[aa]">decode_mcu_DC_refine</a> from jdarith.o(i.decode_mcu_DC_refine) referenced from jdarith.o(i.start_pass)
 <LI><a href="#[de]">decode_mcu_DC_refine</a> from jdhuff.o(i.decode_mcu_DC_refine) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[df]">decode_mcu_sub</a> from jdhuff.o(i.decode_mcu_sub) referenced from jdhuff.o(i.start_pass_huff_decoder)
 <LI><a href="#[74]">decompress_data</a> from jdcoefct.o(i.decompress_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[74]">decompress_data</a> from jdcoefct.o(i.decompress_data) referenced from jdcoefct.o(i.start_output_pass)
 <LI><a href="#[76]">decompress_onepass</a> from jdcoefct.o(i.decompress_onepass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[a6]">decompress_smooth_data</a> from jdcoefct.o(i.decompress_smooth_data) referenced from jdcoefct.o(i.start_output_pass)
 <LI><a href="#[75]">dummy_consume_data</a> from jdcoefct.o(i.dummy_consume_data) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[a2]">emit_message</a> from jerror.o(i.emit_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[a1]">error_exit</a> from jerror.o(i.error_exit) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[9d]">fill_mem_input_buffer</a> from jdatasrc.o(i.fill_mem_input_buffer) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[7c]">finish_input_pass</a> from jdinput.o(i.finish_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[84]">finish_output_pass</a> from jdmaster.o(i.finish_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[d4]">finish_pass1</a> from jquant2.o(i.finish_pass1) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[d6]">finish_pass2</a> from jquant2.o(i.finish_pass2) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[64]">finish_pass_1_quant</a> from jquant1.o(i.finish_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[a4]">format_message</a> from jerror.o(i.format_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[8e]">free_pool</a> from jmemmgr.o(i.free_pool) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[97]">fullsize_upsample</a> from jdsample.o(i.fullsize_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[82]">get_interesting_appn</a> from jdmarker.o(i.get_interesting_appn) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[6e]">gray_rgb_convert</a> from jdcolor.o(i.gray_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[6b]">grayscale_convert</a> from jdcolor.o(i.grayscale_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[92]">h2v1_merged_upsample</a> from jdmerge.o(i.h2v1_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[99]">h2v1_upsample</a> from jdsample.o(i.h2v1_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[94]">h2v2_merged_upsample</a> from jdmerge.o(i.h2v2_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[9a]">h2v2_upsample</a> from jdsample.o(i.h2v2_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[9c]">init_mem_source</a> from jdatasrc.o(i.init_mem_source) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[9b]">int_upsample</a> from jdsample.o(i.int_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[b4]">jpeg_idct_10x10</a> from jidctint.o(i.jpeg_idct_10x10) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[be]">jpeg_idct_10x5</a> from jidctint.o(i.jpeg_idct_10x5) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b5]">jpeg_idct_11x11</a> from jidctint.o(i.jpeg_idct_11x11) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b6]">jpeg_idct_12x12</a> from jidctint.o(i.jpeg_idct_12x12) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[bd]">jpeg_idct_12x6</a> from jidctint.o(i.jpeg_idct_12x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b7]">jpeg_idct_13x13</a> from jidctint.o(i.jpeg_idct_13x13) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b8]">jpeg_idct_14x14</a> from jidctint.o(i.jpeg_idct_14x14) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[bc]">jpeg_idct_14x7</a> from jidctint.o(i.jpeg_idct_14x7) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b9]">jpeg_idct_15x15</a> from jidctint.o(i.jpeg_idct_15x15) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ba]">jpeg_idct_16x16</a> from jidctint.o(i.jpeg_idct_16x16) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[bb]">jpeg_idct_16x8</a> from jidctint.o(i.jpeg_idct_16x8) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ac]">jpeg_idct_1x1</a> from jidctint.o(i.jpeg_idct_1x1) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ca]">jpeg_idct_1x2</a> from jidctint.o(i.jpeg_idct_1x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c2]">jpeg_idct_2x1</a> from jidctint.o(i.jpeg_idct_2x1) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ad]">jpeg_idct_2x2</a> from jidctint.o(i.jpeg_idct_2x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c9]">jpeg_idct_2x4</a> from jidctint.o(i.jpeg_idct_2x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[ae]">jpeg_idct_3x3</a> from jidctint.o(i.jpeg_idct_3x3) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c8]">jpeg_idct_3x6</a> from jidctint.o(i.jpeg_idct_3x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c1]">jpeg_idct_4x2</a> from jidctint.o(i.jpeg_idct_4x2) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[af]">jpeg_idct_4x4</a> from jidctint.o(i.jpeg_idct_4x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c7]">jpeg_idct_4x8</a> from jidctint.o(i.jpeg_idct_4x8) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c6]">jpeg_idct_5x10</a> from jidctint.o(i.jpeg_idct_5x10) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b0]">jpeg_idct_5x5</a> from jidctint.o(i.jpeg_idct_5x5) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c5]">jpeg_idct_6x12</a> from jidctint.o(i.jpeg_idct_6x12) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c0]">jpeg_idct_6x3</a> from jidctint.o(i.jpeg_idct_6x3) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b1]">jpeg_idct_6x6</a> from jidctint.o(i.jpeg_idct_6x6) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c4]">jpeg_idct_7x14</a> from jidctint.o(i.jpeg_idct_7x14) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b2]">jpeg_idct_7x7</a> from jidctint.o(i.jpeg_idct_7x7) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[c3]">jpeg_idct_8x16</a> from jidctint.o(i.jpeg_idct_8x16) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[bf]">jpeg_idct_8x4</a> from jidctint.o(i.jpeg_idct_8x4) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[b3]">jpeg_idct_9x9</a> from jidctint.o(i.jpeg_idct_9x9) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[cd]">jpeg_idct_float</a> from jidctflt.o(i.jpeg_idct_float) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[cc]">jpeg_idct_ifast</a> from jidctfst.o(i.jpeg_idct_ifast) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[cb]">jpeg_idct_islow</a> from jidctint.o(i.jpeg_idct_islow) referenced from jddctmgr.o(i.start_pass)
 <LI><a href="#[9f]">jpeg_resync_to_restart</a> from jdmarker.o(i.jpeg_resync_to_restart) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[91]">merged_1v_upsample</a> from jdmerge.o(i.merged_1v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[93]">merged_2v_upsample</a> from jdmerge.o(i.merged_2v_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[65]">new_color_map_1_quant</a> from jquant1.o(i.new_color_map_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[67]">new_color_map_2_quant</a> from jquant2.o(i.new_color_map_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[98]">noop_upsample</a> from jdsample.o(i.noop_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[6a]">null_convert</a> from jdcolor.o(i.null_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[a3]">output_message</a> from jerror.o(i.output_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[d7]">pass2_fs_dither</a> from jquant2.o(i.pass2_fs_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[d5]">pass2_no_dither</a> from jquant2.o(i.pass2_no_dither) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[d8]">post_process_1pass</a> from jdpostct.o(i.post_process_1pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[da]">post_process_2pass</a> from jdpostct.o(i.post_process_2pass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[d9]">post_process_prepass</a> from jdpostct.o(i.post_process_prepass) referenced from jdpostct.o(i.start_pass_dpost)
 <LI><a href="#[83]">prepare_for_output_pass</a> from jdmaster.o(i.prepare_for_output_pass) referenced from jdmaster.o(i.jinit_master_decompress)
 <LI><a href="#[d3]">prescan_quantize</a> from jquant2.o(i.prescan_quantize) referenced from jquant2.o(i.start_pass_2_quant)
 <LI><a href="#[e1]">process_data_context_main</a> from jdmainct.o(i.process_data_context_main) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[e3]">process_data_crank_post</a> from jdmainct.o(i.process_data_crank_post) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[e2]">process_data_simple_main</a> from jdmainct.o(i.process_data_simple_main) referenced from jdmainct.o(i.start_pass_main)
 <LI><a href="#[d1]">quantize3_ord_dither</a> from jquant1.o(i.quantize3_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[d2]">quantize_fs_dither</a> from jquant1.o(i.quantize_fs_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[d0]">quantize_ord_dither</a> from jquant1.o(i.quantize_ord_dither) referenced from jquant1.o(i.start_pass_1_quant)
 <LI><a href="#[7f]">read_markers</a> from jdmarker.o(i.read_markers) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[80]">read_restart_marker</a> from jdmarker.o(i.read_restart_marker) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[8b]">realize_virt_arrays</a> from jmemmgr.o(i.realize_virt_arrays) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[8a]">request_virt_barray</a> from jmemmgr.o(i.request_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[89]">request_virt_sarray</a> from jmemmgr.o(i.request_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[a5]">reset_error_mgr</a> from jerror.o(i.reset_error_mgr) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[7a]">reset_input_controller</a> from jdinput.o(i.reset_input_controller) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[7e]">reset_marker_reader</a> from jdmarker.o(i.reset_marker_reader) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[6f]">rgb_convert</a> from jdcolor.o(i.rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[6c]">rgb_gray_convert</a> from jdcolor.o(i.rgb_gray_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[8f]">self_destruct</a> from jmemmgr.o(i.self_destruct) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[96]">sep_upsample</a> from jdsample.o(i.sep_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[9e]">skip_input_data</a> from jdatasrc.o(i.skip_input_data) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[81]">skip_variable</a> from jdmarker.o(i.skip_variable) referenced from jdmarker.o(i.jinit_marker_reader)
 <LI><a href="#[71]">start_input_pass</a> from jdcoefct.o(i.start_input_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[7b]">start_input_pass</a> from jdinput.o(i.start_input_pass) referenced from jdinput.o(i.jinit_input_controller)
 <LI><a href="#[72]">start_output_pass</a> from jdcoefct.o(i.start_output_pass) referenced from jdcoefct.o(i.jinit_d_coef_controller)
 <LI><a href="#[68]">start_pass</a> from jdarith.o(i.start_pass) referenced from jdarith.o(i.jinit_arith_decoder)
 <LI><a href="#[7d]">start_pass</a> from jddctmgr.o(i.start_pass) referenced from jddctmgr.o(i.jinit_inverse_dct)
 <LI><a href="#[63]">start_pass_1_quant</a> from jquant1.o(i.start_pass_1_quant) referenced from jquant1.o(i.jinit_1pass_quantizer)
 <LI><a href="#[66]">start_pass_2_quant</a> from jquant2.o(i.start_pass_2_quant) referenced from jquant2.o(i.jinit_2pass_quantizer)
 <LI><a href="#[69]">start_pass_dcolor</a> from jdcolor.o(i.start_pass_dcolor) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[78]">start_pass_dpost</a> from jdpostct.o(i.start_pass_dpost) referenced from jdpostct.o(i.jinit_d_post_controller)
 <LI><a href="#[79]">start_pass_huff_decoder</a> from jdhuff.o(i.start_pass_huff_decoder) referenced from jdhuff.o(i.jinit_huff_decoder)
 <LI><a href="#[77]">start_pass_main</a> from jdmainct.o(i.start_pass_main) referenced from jdmainct.o(i.jinit_d_main_controller)
 <LI><a href="#[90]">start_pass_merged_upsample</a> from jdmerge.o(i.start_pass_merged_upsample) referenced from jdmerge.o(i.jinit_merged_upsampler)
 <LI><a href="#[95]">start_pass_upsample</a> from jdsample.o(i.start_pass_upsample) referenced from jdsample.o(i.jinit_upsampler)
 <LI><a href="#[a0]">term_source</a> from jdatasrc.o(i.term_source) referenced from jdatasrc.o(i.jpeg_mem_src)
 <LI><a href="#[6d]">ycc_rgb_convert</a> from jdcolor.o(i.ycc_rgb_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
 <LI><a href="#[70]">ycck_cmyk_convert</a> from jdcolor.o(i.ycck_cmyk_convert) referenced from jdcolor.o(i.jinit_color_deconverter)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ee]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_block_row
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_onepass
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_ord_dither
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quantize_fs_dither
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1f9]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f7]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[fd]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[fe]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[ff]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[146]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DriverVbusFS
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[101]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[172]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>

<P><STRONG><a name="[107]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[109]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[140]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[10d]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_HCD_Init</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_HCD_PortDisabled_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_PortDisabled_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_PortDisabled
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_HCD_PortEnabled_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_PortEnabled_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_PortEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_HCD_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[12a]"></a>HAL_HCD_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[12c]"></a>HAL_I2C_Init</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[5f]"></a>HAL_I2SEx_FullDuplex_IRQHandler</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_FullDuplex_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2SEx_FullDuplex_IRQHandler &rArr; I2SEx_TxISR_I2SExt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_TxRxCpltCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SEx_TxISR_I2SExt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SEx_RxISR_I2SExt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
</UL>
<P><STRONG><a name="[130]"></a>HAL_I2SEx_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SEx_TxISR_I2SExt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SEx_RxISR_I2SExt
</UL>

<P><STRONG><a name="[132]"></a>HAL_I2S_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_I2S_Init</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2S_Init &rArr; HAL_I2S_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>HAL_I2S_MspInit</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_I2S_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2S_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_I2S_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_I2S_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[136]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[137]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[135]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[13f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13a]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>MX_DriverVbusFS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_platform.o(i.MX_DriverVbusFS))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>

<P><STRONG><a name="[147]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>MX_LIBJPEG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, libjpeg.o(i.MX_LIBJPEG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>MX_USB_HOST_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>TFT_Init</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, tft_stm32_16.o(i.TFT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFT_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_WritePmt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_WriteCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Write16Pmt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>TFT_ReadChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tft_stm32_16.o(i.TFT_ReadChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_ReadChar
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[154]"></a>TFT_SetScroll</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, tft_stm32_16.o(i.TFT_SetScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TFT_SetScroll
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_WritePmt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[153]"></a>TFT_Write16Pmt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tft_stm32_16.o(i.TFT_Write16Pmt))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Init
</UL>

<P><STRONG><a name="[151]"></a>TFT_WriteCmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tft_stm32_16.o(i.TFT_WriteCmd))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SetScroll
</UL>

<P><STRONG><a name="[152]"></a>TFT_WritePmt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tft_stm32_16.o(i.TFT_WritePmt))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SetScroll
</UL>

<P><STRONG><a name="[155]"></a>TFT_putchar</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tft_stm32_16.o(i.TFT_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TFT_putchar &rArr; jpeg_start_decompress &rArr; jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_std_error
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_scanlines
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_src
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_WriteCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Write16Pmt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SetScroll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ReadChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>USBH_AllocPipe</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[15f]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_BulkReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[161]"></a>USBH_BulkSendData</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[162]"></a>USBH_ClosePipe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[164]"></a>USBH_ClrFeature</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[166]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[165]"></a>USBH_CtlReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>

<P><STRONG><a name="[168]"></a>USBH_CtlSendData</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[169]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[17f]"></a>USBH_FindInterface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[16b]"></a>USBH_FreePipe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[16e]"></a>USBH_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[14a]"></a>USBH_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[163]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[102]"></a>USBH_LL_Connect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[104]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[170]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DriverVbusFS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[171]"></a>USBH_LL_GetLastXferSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetLastXferSize))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[179]"></a>USBH_LL_GetToggle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[16a]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[126]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[16d]"></a>USBH_LL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[175]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[123]"></a>USBH_LL_PortDisabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_PortDisabled))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
</UL>

<P><STRONG><a name="[125]"></a>USBH_LL_PortEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_PortEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
</UL>

<P><STRONG><a name="[174]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[17a]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[176]"></a>USBH_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[16f]"></a>USBH_LL_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[160]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[183]"></a>USBH_MSC_BOT_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[178]"></a>USBH_MSC_BOT_Process</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetToggle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[17c]"></a>USBH_MSC_BOT_REQ_GetMaxLUN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[17b]"></a>USBH_MSC_BOT_REQ_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[17d]"></a>USBH_MSC_GetLUNInfo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_msc.o(i.USBH_MSC_GetLUNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_GetLUNInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ioctl
</UL>

<P><STRONG><a name="[18c]"></a>USBH_MSC_Read</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
</UL>

<P><STRONG><a name="[185]"></a>USBH_MSC_SCSI_Inquiry</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[18a]"></a>USBH_MSC_SCSI_Read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBH_MSC_SCSI_Read &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[187]"></a>USBH_MSC_SCSI_ReadCapacity</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_MSC_SCSI_ReadCapacity &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[188]"></a>USBH_MSC_SCSI_RequestSense</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_MSC_SCSI_RequestSense &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[186]"></a>USBH_MSC_SCSI_TestUnitReady</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[18b]"></a>USBH_MSC_SCSI_Write</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[18f]"></a>USBH_MSC_UnitIsReady</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_UnitIsReady))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_status
</UL>

<P><STRONG><a name="[18e]"></a>USBH_MSC_Write</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
</UL>

<P><STRONG><a name="[184]"></a>USBH_OpenPipe</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[14c]"></a>USBH_RegisterClass</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[180]"></a>USBH_SelectInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SelectInterface))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[14d]"></a>USBH_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_Start &rArr; USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[e4]"></a>USBH_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_diskio.o(i.USBH_initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>USBH_ioctl</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, usbh_diskio.o(i.USBH_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ioctl &rArr; USBH_MSC_GetLUNInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>USBH_read</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = USBH_read &rArr; USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>USBH_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_diskio.o(i.USBH_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_status
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_UnitIsReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>USBH_write</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = USBH_write &rArr; USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>USB_CoreInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[119]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[191]"></a>USB_DoPing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DoPing))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[129]"></a>USB_DriveVbus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[128]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[194]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[193]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[106]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[10e]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>USB_HC_Halt</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>USB_HC_Init</STRONG> (Thumb, 240 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[113]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>USB_HC_StartXfer</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[11d]"></a>USB_HostInit</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[110]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>USB_ReadPacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>USB_SetCurrentMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[12b]"></a>USB_StopHost</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[192]"></a>USB_WritePacket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fb]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1b0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_message
</UL>

<P><STRONG><a name="[1fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[1aa]"></a>jcopy_block_row</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jutils.o(i.jcopy_block_row))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_smooth_data
</UL>

<P><STRONG><a name="[1b9]"></a>jcopy_sample_rows</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, jutils.o(i.jcopy_sample_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merged_2v_upsample
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grayscale_convert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_upsample
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_upsample
</UL>

<P><STRONG><a name="[1ba]"></a>jdiv_round_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jutils.o(i.jdiv_round_up))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_core_output_dimensions
</UL>

<P><STRONG><a name="[1bb]"></a>jinit_1pass_quantizer</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, jquant1.o(i.jinit_1pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colormap
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_fs_workspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1bd]"></a>jinit_2pass_quantizer</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, jquant2.o(i.jinit_2pass_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_2pass_quantizer &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1db]"></a>jinit_arith_decoder</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, jdarith.o(i.jinit_arith_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_arith_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1bf]"></a>jinit_color_deconverter</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, jdcolor.o(i.jinit_color_deconverter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_color_deconverter &rArr; build_ycc_rgb_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1c1]"></a>jinit_d_coef_controller</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, jdcoefct.o(i.jinit_d_coef_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jinit_d_coef_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1c3]"></a>jinit_d_main_controller</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, jdmainct.o(i.jinit_d_main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jinit_d_main_controller &rArr; alloc_funny_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1c5]"></a>jinit_d_post_controller</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, jdpostct.o(i.jinit_d_post_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_d_post_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1dc]"></a>jinit_huff_decoder</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, jdhuff.o(i.jinit_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_huff_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1d0]"></a>jinit_input_controller</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, jdinput.o(i.jinit_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_input_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[1c6]"></a>jinit_inverse_dct</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, jddctmgr.o(i.jinit_inverse_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_inverse_dct
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1c7]"></a>jinit_marker_reader</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jdmarker.o(i.jinit_marker_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jinit_marker_reader
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_marker_reader
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[1c8]"></a>jinit_master_decompress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jdmaster.o(i.jinit_master_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
</UL>

<P><STRONG><a name="[1ca]"></a>jinit_memory_mgr</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, jmemmgr.o(i.jinit_memory_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jinit_memory_mgr &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateDecompress
</UL>

<P><STRONG><a name="[1cd]"></a>jinit_merged_upsampler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, jdmerge.o(i.jinit_merged_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_merged_upsampler &rArr; build_ycc_rgb_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1cf]"></a>jinit_upsampler</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, jdsample.o(i.jinit_upsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_upsampler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[157]"></a>jpeg_CreateDecompress</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, jdapimin.o(i.jpeg_CreateDecompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = jpeg_CreateDecompress &rArr; jinit_memory_mgr &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_reader
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_input_controller
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[1d6]"></a>jpeg_abort</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_decompress
</UL>

<P><STRONG><a name="[1b4]"></a>jpeg_alloc_huff_table</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
</UL>

<P><STRONG><a name="[1b6]"></a>jpeg_alloc_quant_table</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dqt
</UL>

<P><STRONG><a name="[1d1]"></a>jpeg_calc_output_dimensions</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, jdmaster.o(i.jpeg_calc_output_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_calc_output_dimensions &rArr; jpeg_core_output_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_merged_upsample
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_core_output_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[1d4]"></a>jpeg_consume_input</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_consume_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_consume_input &rArr; default_decompress_parms
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_decompress_parms
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_read_header
</UL>

<P><STRONG><a name="[1d2]"></a>jpeg_core_output_dimensions</STRONG> (Thumb, 658 bytes, Stack size 24 bytes, jdinput.o(i.jpeg_core_output_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_core_output_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
</UL>

<P><STRONG><a name="[1ab]"></a>jpeg_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_decompress
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[15e]"></a>jpeg_destroy_decompress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdapimin.o(i.jpeg_destroy_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy_decompress &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[15d]"></a>jpeg_finish_decompress</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_finish_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_finish_decompress &rArr; jpeg_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[1b1]"></a>jpeg_free_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_free_large &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[1b2]"></a>jpeg_free_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[19c]"></a>jpeg_get_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_get_large &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[19d]"></a>jpeg_get_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>

<P><STRONG><a name="[b4]"></a>jpeg_idct_10x10</STRONG> (Thumb, 800 bytes, Stack size 452 bytes, jidctint.o(i.jpeg_idct_10x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = jpeg_idct_10x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[be]"></a>jpeg_idct_10x5</STRONG> (Thumb, 576 bytes, Stack size 232 bytes, jidctint.o(i.jpeg_idct_10x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = jpeg_idct_10x5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b5]"></a>jpeg_idct_11x11</STRONG> (Thumb, 1110 bytes, Stack size 484 bytes, jidctint.o(i.jpeg_idct_11x11))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = jpeg_idct_11x11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b6]"></a>jpeg_idct_12x12</STRONG> (Thumb, 994 bytes, Stack size 520 bytes, jidctint.o(i.jpeg_idct_12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = jpeg_idct_12x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[bd]"></a>jpeg_idct_12x6</STRONG> (Thumb, 710 bytes, Stack size 324 bytes, jidctint.o(i.jpeg_idct_12x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = jpeg_idct_12x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b7]"></a>jpeg_idct_13x13</STRONG> (Thumb, 1352 bytes, Stack size 556 bytes, jidctint.o(i.jpeg_idct_13x13))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = jpeg_idct_13x13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b8]"></a>jpeg_idct_14x14</STRONG> (Thumb, 1178 bytes, Stack size 592 bytes, jidctint.o(i.jpeg_idct_14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = jpeg_idct_14x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[bc]"></a>jpeg_idct_14x7</STRONG> (Thumb, 888 bytes, Stack size 364 bytes, jidctint.o(i.jpeg_idct_14x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = jpeg_idct_14x7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b9]"></a>jpeg_idct_15x15</STRONG> (Thumb, 1198 bytes, Stack size 628 bytes, jidctint.o(i.jpeg_idct_15x15))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = jpeg_idct_15x15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ba]"></a>jpeg_idct_16x16</STRONG> (Thumb, 1512 bytes, Stack size 664 bytes, jidctint.o(i.jpeg_idct_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = jpeg_idct_16x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[bb]"></a>jpeg_idct_16x8</STRONG> (Thumb, 1240 bytes, Stack size 404 bytes, jidctint.o(i.jpeg_idct_16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = jpeg_idct_16x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ac]"></a>jpeg_idct_1x1</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, jidctint.o(i.jpeg_idct_1x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpeg_idct_1x1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ca]"></a>jpeg_idct_1x2</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, jidctint.o(i.jpeg_idct_1x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_idct_1x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c2]"></a>jpeg_idct_2x1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, jidctint.o(i.jpeg_idct_2x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_idct_2x1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ad]"></a>jpeg_idct_2x2</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, jidctint.o(i.jpeg_idct_2x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_idct_2x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c9]"></a>jpeg_idct_2x4</STRONG> (Thumb, 198 bytes, Stack size 68 bytes, jidctint.o(i.jpeg_idct_2x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = jpeg_idct_2x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[ae]"></a>jpeg_idct_3x3</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, jidctint.o(i.jpeg_idct_3x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_idct_3x3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c8]"></a>jpeg_idct_3x6</STRONG> (Thumb, 300 bytes, Stack size 124 bytes, jidctint.o(i.jpeg_idct_3x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = jpeg_idct_3x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c1]"></a>jpeg_idct_4x2</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, jidctint.o(i.jpeg_idct_4x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_idct_4x2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[af]"></a>jpeg_idct_4x4</STRONG> (Thumb, 278 bytes, Stack size 100 bytes, jidctint.o(i.jpeg_idct_4x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = jpeg_idct_4x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c7]"></a>jpeg_idct_4x8</STRONG> (Thumb, 600 bytes, Stack size 248 bytes, jidctint.o(i.jpeg_idct_4x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = jpeg_idct_4x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c6]"></a>jpeg_idct_5x10</STRONG> (Thumb, 598 bytes, Stack size 332 bytes, jidctint.o(i.jpeg_idct_5x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = jpeg_idct_5x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b0]"></a>jpeg_idct_5x5</STRONG> (Thumb, 368 bytes, Stack size 136 bytes, jidctint.o(i.jpeg_idct_5x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jpeg_idct_5x5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c5]"></a>jpeg_idct_6x12</STRONG> (Thumb, 682 bytes, Stack size 424 bytes, jidctint.o(i.jpeg_idct_6x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = jpeg_idct_6x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c0]"></a>jpeg_idct_6x3</STRONG> (Thumb, 296 bytes, Stack size 108 bytes, jidctint.o(i.jpeg_idct_6x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = jpeg_idct_6x3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b1]"></a>jpeg_idct_6x6</STRONG> (Thumb, 398 bytes, Stack size 196 bytes, jidctint.o(i.jpeg_idct_6x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = jpeg_idct_6x6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c4]"></a>jpeg_idct_7x14</STRONG> (Thumb, 882 bytes, Stack size 536 bytes, jidctint.o(i.jpeg_idct_7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = jpeg_idct_7x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b2]"></a>jpeg_idct_7x7</STRONG> (Thumb, 632 bytes, Stack size 308 bytes, jidctint.o(i.jpeg_idct_7x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = jpeg_idct_7x7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[c3]"></a>jpeg_idct_8x16</STRONG> (Thumb, 1114 bytes, Stack size 664 bytes, jidctint.o(i.jpeg_idct_8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = jpeg_idct_8x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[bf]"></a>jpeg_idct_8x4</STRONG> (Thumb, 472 bytes, Stack size 240 bytes, jidctint.o(i.jpeg_idct_8x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = jpeg_idct_8x4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[b3]"></a>jpeg_idct_9x9</STRONG> (Thumb, 750 bytes, Stack size 412 bytes, jidctint.o(i.jpeg_idct_9x9))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = jpeg_idct_9x9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[cd]"></a>jpeg_idct_float</STRONG> (Thumb, 818 bytes, Stack size 276 bytes, jidctflt.o(i.jpeg_idct_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = jpeg_idct_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[cc]"></a>jpeg_idct_ifast</STRONG> (Thumb, 722 bytes, Stack size 368 bytes, jidctfst.o(i.jpeg_idct_ifast))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = jpeg_idct_ifast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[cb]"></a>jpeg_idct_islow</STRONG> (Thumb, 876 bytes, Stack size 376 bytes, jidctint.o(i.jpeg_idct_islow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = jpeg_idct_islow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.start_pass)
</UL>
<P><STRONG><a name="[1e6]"></a>jpeg_mem_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_available))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[1cb]"></a>jpeg_mem_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
</UL>

<P><STRONG><a name="[159]"></a>jpeg_mem_src</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jdatasrc.o(i.jpeg_mem_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_mem_src
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[1cc]"></a>jpeg_mem_term</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_term))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>

<P><STRONG><a name="[1e7]"></a>jpeg_open_backing_store</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_open_backing_store))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[15a]"></a>jpeg_read_header</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, jdapimin.o(i.jpeg_read_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_read_header &rArr; jpeg_consume_input &rArr; default_decompress_parms
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_consume_input
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[15c]"></a>jpeg_read_scanlines</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, jdapistd.o(i.jpeg_read_scanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_read_scanlines
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[9f]"></a>jpeg_resync_to_restart</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, jdmarker.o(i.jpeg_resync_to_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_resync_to_restart &rArr; next_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[15b]"></a>jpeg_start_decompress</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, jdapistd.o(i.jpeg_start_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = jpeg_start_decompress &rArr; jinit_master_decompress &rArr; master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_pass_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[156]"></a>jpeg_std_error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, jerror.o(i.jpeg_std_error))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
</UL>

<P><STRONG><a name="[1c2]"></a>jround_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jutils.o(i.jround_up))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_putchar
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LIBJPEG_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[181]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[148]"></a>MX_GPIO_Init</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>USBH_UserProcess</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_host.o(i.USBH_UserProcess))
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[114]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 632 bytes, Stack size 40 bytes, stm32f4xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_HC_IN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, stm32f4xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_OUT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCD_Port_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[13b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[5e]"></a>I2S_IRQHandler</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f4xx_hal_i2s.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_RxCpltCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
</UL>
<P><STRONG><a name="[131]"></a>I2SEx_RxISR_I2SExt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_i2s_ex.o(i.I2SEx_RxISR_I2SExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2SEx_RxISR_I2SExt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_TxRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>I2SEx_TxISR_I2SExt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_i2s_ex.o(i.I2SEx_TxISR_I2SExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2SEx_TxISR_I2SExt
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_TxRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>default_decompress_parms</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, jdapimin.o(i.default_decompress_parms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = default_decompress_parms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_consume_input
</UL>

<P><STRONG><a name="[1d9]"></a>output_pass_setup</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, jdapistd.o(i.output_pass_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = output_pass_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_decompress
</UL>

<P><STRONG><a name="[84]"></a>finish_output_pass</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jdmaster.o(i.finish_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[1c9]"></a>master_selection</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, jdmaster.o(i.master_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = master_selection &rArr; jinit_1pass_quantizer &rArr; create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_upsampler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_merged_upsampler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_inverse_dct
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_post_controller
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_main_controller
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_merged_upsample
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_huff_decoder
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_coef_controller
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_arith_decoder
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_master_decompress
</UL>

<P><STRONG><a name="[83]"></a>prepare_for_output_pass</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, jdmaster.o(i.prepare_for_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepare_for_output_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmaster.o(i.jinit_master_decompress)
</UL>
<P><STRONG><a name="[1d3]"></a>use_merged_upsample</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, jdmaster.o(i.use_merged_upsample))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_output_dimensions
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_selection
</UL>

<P><STRONG><a name="[62]"></a>consume_markers</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, jdinput.o(i.consume_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = consume_markers &rArr; start_input_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>
<BR>[Address Reference Count : 3]<UL><LI> jdinput.o(i.finish_input_pass)
<LI> jdinput.o(i.jinit_input_controller)
<LI> jdinput.o(i.reset_input_controller)
</UL>
<P><STRONG><a name="[7c]"></a>finish_input_pass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jdinput.o(i.finish_input_pass))
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[1a1]"></a>initial_setup</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, jdinput.o(i.initial_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = initial_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>

<P><STRONG><a name="[1df]"></a>per_scan_setup</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, jdinput.o(i.per_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
</UL>

<P><STRONG><a name="[7a]"></a>reset_input_controller</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jdinput.o(i.reset_input_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_input_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[7b]"></a>start_input_pass</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, jdinput.o(i.start_input_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = start_input_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_markers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdinput.o(i.jinit_input_controller)
</UL>
<P><STRONG><a name="[1c4]"></a>alloc_funny_pointers</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, jdmainct.o(i.alloc_funny_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alloc_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_d_main_controller
</UL>

<P><STRONG><a name="[1eb]"></a>make_funny_pointers</STRONG> (Thumb, 166 bytes, Stack size 36 bytes, jdmainct.o(i.make_funny_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = make_funny_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_main
</UL>

<P><STRONG><a name="[e1]"></a>process_data_context_main</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, jdmainct.o(i.process_data_context_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = process_data_context_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[e3]"></a>process_data_crank_post</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, jdmainct.o(i.process_data_crank_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_data_crank_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[e2]"></a>process_data_simple_main</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, jdmainct.o(i.process_data_simple_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_data_simple_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[77]"></a>start_pass_main</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jdmainct.o(i.start_pass_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = start_pass_main &rArr; make_funny_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_funny_pointers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmainct.o(i.jinit_d_main_controller)
</UL>
<P><STRONG><a name="[73]"></a>consume_data</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, jdcoefct.o(i.consume_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = consume_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[74]"></a>decompress_data</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, jdcoefct.o(i.decompress_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decompress_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
<LI> jdcoefct.o(i.start_output_pass)
</UL>
<P><STRONG><a name="[76]"></a>decompress_onepass</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, jdcoefct.o(i.decompress_onepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decompress_onepass
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[a6]"></a>decompress_smooth_data</STRONG> (Thumb, 1062 bytes, Stack size 312 bytes, jdcoefct.o(i.decompress_smooth_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = decompress_smooth_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_block_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.start_output_pass)
</UL>
<P><STRONG><a name="[75]"></a>dummy_consume_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdcoefct.o(i.dummy_consume_data))
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[1e9]"></a>smoothing_ok</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, jdcoefct.o(i.smoothing_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smoothing_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_output_pass
</UL>

<P><STRONG><a name="[1a0]"></a>start_iMCU_row</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, jdcoefct.o(i.start_iMCU_row))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_input_pass
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_onepass
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_data
</UL>

<P><STRONG><a name="[71]"></a>start_input_pass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jdcoefct.o(i.start_input_pass))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[72]"></a>start_output_pass</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, jdcoefct.o(i.start_output_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_output_pass &rArr; smoothing_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoothing_ok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcoefct.o(i.jinit_d_coef_controller)
</UL>
<P><STRONG><a name="[d8]"></a>post_process_1pass</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, jdpostct.o(i.post_process_1pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = post_process_1pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[da]"></a>post_process_2pass</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, jdpostct.o(i.post_process_2pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = post_process_2pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[d9]"></a>post_process_prepass</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, jdpostct.o(i.post_process_prepass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = post_process_prepass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.start_pass_dpost)
</UL>
<P><STRONG><a name="[78]"></a>start_pass_dpost</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, jdpostct.o(i.start_pass_dpost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_dpost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdpostct.o(i.jinit_d_post_controller)
</UL>
<P><STRONG><a name="[1b7]"></a>examine_app0</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, jdmarker.o(i.examine_app0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = examine_app0
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_interesting_appn
</UL>

<P><STRONG><a name="[1b8]"></a>examine_app14</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, jdmarker.o(i.examine_app14))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = examine_app14
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_interesting_appn
</UL>

<P><STRONG><a name="[1e0]"></a>first_marker</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, jdmarker.o(i.first_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = first_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1e4]"></a>get_dac</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, jdmarker.o(i.get_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dac
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1b3]"></a>get_dht</STRONG> (Thumb, 514 bytes, Stack size 344 bytes, jdmarker.o(i.get_dht))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = get_dht &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1b5]"></a>get_dqt</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, jdmarker.o(i.get_dqt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_dqt &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1e5]"></a>get_dri</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, jdmarker.o(i.get_dri))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_dri
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[82]"></a>get_interesting_appn</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, jdmarker.o(i.get_interesting_appn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_interesting_appn &rArr; examine_app14
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examine_app14
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examine_app0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[1e2]"></a>get_sof</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, jdmarker.o(i.get_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_sof
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1e1]"></a>get_soi</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, jdmarker.o(i.get_soi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_soi
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1e3]"></a>get_sos</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, jdmarker.o(i.get_sos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_sos
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[1d8]"></a>next_marker</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, jdmarker.o(i.next_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_marker
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_resync_to_restart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restart_marker
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>

<P><STRONG><a name="[7f]"></a>read_markers</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, jdmarker.o(i.read_markers))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = read_markers &rArr; get_dht &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_variable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sos
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soi
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sof
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dri
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dqt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dht
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dac
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[80]"></a>read_restart_marker</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, jdmarker.o(i.read_restart_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_restart_marker &rArr; next_marker
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[7e]"></a>reset_marker_reader</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jdmarker.o(i.reset_marker_reader))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_reader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[81]"></a>skip_variable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, jdmarker.o(i.skip_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skip_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_markers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmarker.o(i.jinit_marker_reader)
</UL>
<P><STRONG><a name="[e0]"></a>decode_mcu</STRONG> (Thumb, 724 bytes, Stack size 136 bytes, jdhuff.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = decode_mcu &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[dc]"></a>decode_mcu_AC_first</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, jdhuff.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decode_mcu_AC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[db]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 680 bytes, Stack size 376 bytes, jdhuff.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = decode_mcu_AC_refine &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[dd]"></a>decode_mcu_DC_first</STRONG> (Thumb, 340 bytes, Stack size 128 bytes, jdhuff.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = decode_mcu_DC_first &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[de]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, jdhuff.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decode_mcu_DC_refine &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[df]"></a>decode_mcu_sub</STRONG> (Thumb, 738 bytes, Stack size 144 bytes, jdhuff.o(i.decode_mcu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = decode_mcu_sub &rArr; jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.start_pass_huff_decoder)
</UL>
<P><STRONG><a name="[1a7]"></a>jpeg_fill_bit_buffer</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, jdhuff.o(i.jpeg_fill_bit_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_huff_decode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[1a8]"></a>jpeg_huff_decode</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, jdhuff.o(i.jpeg_huff_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_huff_decode &rArr; jpeg_fill_bit_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fill_bit_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[1d7]"></a>jpeg_make_d_derived_tbl</STRONG> (Thumb, 472 bytes, Stack size 1384 bytes, jdhuff.o(i.jpeg_make_d_derived_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff_decoder
</UL>

<P><STRONG><a name="[1a6]"></a>process_restart</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, jdhuff.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_sub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[79]"></a>start_pass_huff_decoder</STRONG> (Thumb, 972 bytes, Stack size 40 bytes, jdhuff.o(i.start_pass_huff_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = start_pass_huff_decoder &rArr; jpeg_make_d_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_d_derived_tbl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdhuff.o(i.jinit_huff_decoder)
</UL>
<P><STRONG><a name="[19e]"></a>arith_decode</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, jdarith.o(i.arith_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[ab]"></a>decode_mcu</STRONG> (Thumb, 546 bytes, Stack size 64 bytes, jdarith.o(i.decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decode_mcu &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a8]"></a>decode_mcu_AC_first</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, jdarith.o(i.decode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decode_mcu_AC_first &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a7]"></a>decode_mcu_AC_refine</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, jdarith.o(i.decode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decode_mcu_AC_refine &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a9]"></a>decode_mcu_DC_first</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, jdarith.o(i.decode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = decode_mcu_DC_first &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[aa]"></a>decode_mcu_DC_refine</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, jdarith.o(i.decode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decode_mcu_DC_refine &rArr; arith_decode &rArr; get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_restart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[19f]"></a>get_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, jdarith.o(i.get_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_decode
</UL>

<P><STRONG><a name="[1a9]"></a>process_restart</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, jdarith.o(i.process_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_refine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_DC_first
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_refine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu_AC_first
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mcu
</UL>

<P><STRONG><a name="[68]"></a>start_pass</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, jdarith.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdarith.o(i.jinit_arith_decoder)
</UL>
<P><STRONG><a name="[7d]"></a>start_pass</STRONG> (Thumb, 788 bytes, Stack size 96 bytes, jddctmgr.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = start_pass &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jddctmgr.o(i.jinit_inverse_dct)
</UL>
<P><STRONG><a name="[97]"></a>fullsize_upsample</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jdsample.o(i.fullsize_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[99]"></a>h2v1_upsample</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, jdsample.o(i.h2v1_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = h2v1_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[9a]"></a>h2v2_upsample</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, jdsample.o(i.h2v2_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = h2v2_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[9b]"></a>int_upsample</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, jdsample.o(i.int_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = int_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[98]"></a>noop_upsample</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jdsample.o(i.noop_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[96]"></a>sep_upsample</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, jdsample.o(i.sep_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sep_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[95]"></a>start_pass_upsample</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jdsample.o(i.start_pass_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdsample.o(i.jinit_upsampler)
</UL>
<P><STRONG><a name="[1c0]"></a>build_ycc_rgb_table</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, jdcolor.o(i.build_ycc_rgb_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_deconverter
</UL>

<P><STRONG><a name="[6e]"></a>gray_rgb_convert</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, jdcolor.o(i.gray_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gray_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[6b]"></a>grayscale_convert</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, jdcolor.o(i.grayscale_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grayscale_convert &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[6a]"></a>null_convert</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, jdcolor.o(i.null_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = null_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[6f]"></a>rgb_convert</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, jdcolor.o(i.rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[6c]"></a>rgb_gray_convert</STRONG> (Thumb, 116 bytes, Stack size 36 bytes, jdcolor.o(i.rgb_gray_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rgb_gray_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[69]"></a>start_pass_dcolor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdcolor.o(i.start_pass_dcolor))
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[6d]"></a>ycc_rgb_convert</STRONG> (Thumb, 156 bytes, Stack size 68 bytes, jdcolor.o(i.ycc_rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ycc_rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[70]"></a>ycck_cmyk_convert</STRONG> (Thumb, 182 bytes, Stack size 68 bytes, jdcolor.o(i.ycck_cmyk_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ycck_cmyk_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdcolor.o(i.jinit_color_deconverter)
</UL>
<P><STRONG><a name="[1ce]"></a>build_ycc_rgb_table</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, jdmerge.o(i.build_ycc_rgb_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = build_ycc_rgb_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_merged_upsampler
</UL>

<P><STRONG><a name="[92]"></a>h2v1_merged_upsample</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, jdmerge.o(i.h2v1_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = h2v1_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[94]"></a>h2v2_merged_upsample</STRONG> (Thumb, 366 bytes, Stack size 100 bytes, jdmerge.o(i.h2v2_merged_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = h2v2_merged_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[91]"></a>merged_1v_upsample</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jdmerge.o(i.merged_1v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = merged_1v_upsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[93]"></a>merged_2v_upsample</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, jdmerge.o(i.merged_2v_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = merged_2v_upsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[90]"></a>start_pass_merged_upsample</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jdmerge.o(i.start_pass_merged_upsample))
<BR>[Address Reference Count : 1]<UL><LI> jdmerge.o(i.jinit_merged_upsampler)
</UL>
<P><STRONG><a name="[1bc]"></a>alloc_fs_workspace</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, jquant1.o(i.alloc_fs_workspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_fs_workspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[ce]"></a>color_quantize</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, jquant1.o(i.color_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = color_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[cf]"></a>color_quantize3</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, jquant1.o(i.color_quantize3))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = color_quantize3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[1a2]"></a>create_colorindex</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, jquant1.o(i.create_colorindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_colorindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;largest_input_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[1a4]"></a>create_colormap</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, jquant1.o(i.create_colormap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_colormap &rArr; select_ncolors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ncolors
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_1pass_quantizer
</UL>

<P><STRONG><a name="[1ea]"></a>create_odither_tables</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, jquant1.o(i.create_odither_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_odither_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_1_quant
</UL>

<P><STRONG><a name="[64]"></a>finish_pass_1_quant</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant1.o(i.finish_pass_1_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[1a3]"></a>largest_input_value</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, jquant1.o(i.largest_input_value))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
</UL>

<P><STRONG><a name="[65]"></a>new_color_map_1_quant</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jquant1.o(i.new_color_map_1_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[d1]"></a>quantize3_ord_dither</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, jquant1.o(i.quantize3_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = quantize3_ord_dither
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[d2]"></a>quantize_fs_dither</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, jquant1.o(i.quantize_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = quantize_fs_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[d0]"></a>quantize_ord_dither</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, jquant1.o(i.quantize_ord_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = quantize_ord_dither
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.start_pass_1_quant)
</UL>
<P><STRONG><a name="[1a5]"></a>select_ncolors</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, jquant1.o(i.select_ncolors))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = select_ncolors
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colormap
</UL>

<P><STRONG><a name="[63]"></a>start_pass_1_quant</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, jquant1.o(i.start_pass_1_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = start_pass_1_quant &rArr; create_odither_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_odither_tables
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_colorindex
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_fs_workspace
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant1.o(i.jinit_1pass_quantizer)
</UL>
<P><STRONG><a name="[1e8]"></a>compute_color</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, jquant2.o(i.compute_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compute_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>

<P><STRONG><a name="[1ac]"></a>fill_inverse_cmap</STRONG> (Thumb, 148 bytes, Stack size 432 bytes, jquant2.o(i.fill_inverse_cmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_nearby_colors
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_best_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_no_dither
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass2_fs_dither
</UL>

<P><STRONG><a name="[1ae]"></a>find_best_colors</STRONG> (Thumb, 210 bytes, Stack size 572 bytes, jquant2.o(i.find_best_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = find_best_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>

<P><STRONG><a name="[1ad]"></a>find_nearby_colors</STRONG> (Thumb, 310 bytes, Stack size 1088 bytes, jquant2.o(i.find_nearby_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = find_nearby_colors
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>

<P><STRONG><a name="[d4]"></a>finish_pass1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jquant2.o(i.finish_pass1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = finish_pass1 &rArr; select_colors &rArr; median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[d6]"></a>finish_pass2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jquant2.o(i.finish_pass2))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[1be]"></a>init_error_limit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, jquant2.o(i.init_error_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_error_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_2pass_quantizer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_2_quant
</UL>

<P><STRONG><a name="[1dd]"></a>median_cut</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, jquant2.o(i.median_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
</UL>

<P><STRONG><a name="[67]"></a>new_color_map_2_quant</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jquant2.o(i.new_color_map_2_quant))
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[d7]"></a>pass2_fs_dither</STRONG> (Thumb, 470 bytes, Stack size 168 bytes, jquant2.o(i.pass2_fs_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = pass2_fs_dither &rArr; fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[d5]"></a>pass2_no_dither</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, jquant2.o(i.pass2_no_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = pass2_no_dither &rArr; fill_inverse_cmap &rArr; find_nearby_colors
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_inverse_cmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[d3]"></a>prescan_quantize</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, jquant2.o(i.prescan_quantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prescan_quantize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.start_pass_2_quant)
</UL>
<P><STRONG><a name="[1af]"></a>select_colors</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, jquant2.o(i.select_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = select_colors &rArr; median_cut &rArr; update_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_box
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_color
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass1
</UL>

<P><STRONG><a name="[66]"></a>start_pass_2_quant</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, jquant2.o(i.start_pass_2_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_pass_2_quant &rArr; init_error_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_error_limit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jquant2.o(i.jinit_2pass_quantizer)
</UL>
<P><STRONG><a name="[1de]"></a>update_box</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, jquant2.o(i.update_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_colors
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_cut
</UL>

<P><STRONG><a name="[9d]"></a>fill_mem_input_buffer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jdatasrc.o(i.fill_mem_input_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fill_mem_input_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[9c]"></a>init_mem_source</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatasrc.o(i.init_mem_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[9e]"></a>skip_input_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, jdatasrc.o(i.skip_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skip_input_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[a0]"></a>term_source</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatasrc.o(i.term_source))
<BR>[Address Reference Count : 1]<UL><LI> jdatasrc.o(i.jpeg_mem_src)
</UL>
<P><STRONG><a name="[a2]"></a>emit_message</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jerror.o(i.emit_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = emit_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a1]"></a>error_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jerror.o(i.error_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = error_exit &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a4]"></a>format_message</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, jerror.o(i.format_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = format_message &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a3]"></a>output_message</STRONG> (Thumb, 16 bytes, Stack size 208 bytes, jerror.o(i.output_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = output_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a5]"></a>reset_error_mgr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jerror.o(i.reset_error_mgr))
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[8d]"></a>access_virt_barray</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, jmemmgr.o(i.access_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = access_virt_barray &rArr; do_barray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_barray_io
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[8c]"></a>access_virt_sarray</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, jmemmgr.o(i.access_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = access_virt_sarray &rArr; do_sarray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sarray_io
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[88]"></a>alloc_barray</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = alloc_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[86]"></a>alloc_large</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = alloc_large &rArr; jpeg_get_large &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[87]"></a>alloc_sarray</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[85]"></a>alloc_small</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_sarray
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_barray
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[199]"></a>do_barray_io</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, jmemmgr.o(i.do_barray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_barray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
</UL>

<P><STRONG><a name="[19a]"></a>do_sarray_io</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, jmemmgr.o(i.do_sarray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_sarray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
</UL>

<P><STRONG><a name="[8e]"></a>free_pool</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, jmemmgr.o(i.free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free_pool &rArr; jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[19b]"></a>out_of_memory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jmemmgr.o(i.out_of_memory))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[8b]"></a>realize_virt_arrays</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, jmemmgr.o(i.realize_virt_arrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = realize_virt_arrays &rArr; alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_open_backing_store
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_available
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[8a]"></a>request_virt_barray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = request_virt_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[89]"></a>request_virt_sarray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = request_virt_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[8f]"></a>self_destruct</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jmemmgr.o(i.self_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = self_destruct &rArr; free_pool &rArr; jpeg_free_small &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[16c]"></a>DeInitStateMachine</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[167]"></a>USBH_HandleControl</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[eb]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_MSC_ClassRequest &rArr; USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>USBH_MSC_Process</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBH_MSC_Process &rArr; USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[189]"></a>USBH_MSC_RdWrProcess</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_RdWrProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
</UL>

<P><STRONG><a name="[ed]"></a>USBH_MSC_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[196]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[198]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[197]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
